<?php
$GLOBALS['print_debug_lines'] = FALSE;
/**
 * @file
 *
 * Implements hooks and callbacks for this module.
 */
define('FLEXPAPER_VIEWER_PATH', 'sites/all/libraries/flexpaper/FlexPaperViewer.swf');

define('SIDORA_EX_DUMP', FALSE);

/**
 * Implements hook_menu().
 */
function si_exhibition_menu() {
  return array(
    'admin/settings/si/exhibition' => array(
      'title' => 'Smithsonian Exhibition',
      'description' => 'Configure the display of the Exhibition repository.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('si_exhibition_admin_settings'),
      'access arguments' => array('administer site configuration'),
      'file' => 'si_exhibition.admin.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    'admin/settings/exhibition' => array(
      'description' => 'Configure the display of the Exhibition repository.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('si_exhibition_admin_settings'),
      'access arguments' => array('administer site configuration'),
      'file' => 'si_exhibition.admin.inc',
      'type' => MENU_CALLBACK,
    ),
    'si/exhibition/datastream' => array(
      'description' => 'Fetch the datastream for the given object using ajax.',
      'page callback' => 'si_exhibition_get_datastream_as_json',
      'access callback' => true,
      'type' => MENU_CALLBACK,
    ),
    'si/exhibition/xsl' => array(
      'description' => 'Place to get xsl stylesheets for metadata presentation',
      'page callback' => 'si_exhibition_xsl',
      'page arguments' => array(1),
      'access callback' => true,
      'type' => MENU_CALLBACK,
    ),
    'si/exhibition/tn' => array(
      'description' => 'Fetch the thumbnail for the given object',
      'page callback' => 'si_exhibition_get_tn',
      'access callback' => true,
      'type' => MENU_CALLBACK,
    ),
    'public' => array(
      'description' => 'The public "name" of the exhibition custom url.',
      'page callback' => 'si_exhibition_custom_url',
      'page arguments' => array(1),
      'access callback' => true,
      'type' => MENU_CALLBACK,
    ),
    'si/exhibition/flexpaper/%' => array( // @todo check to see if this can be merged into si/exhibition/datastream
      'description' => 'View the OBJ.swf datastream of the given object using FlexPaper',
      'page callback' => 'si_exhibition_flexpaper',
      'page arguments' => array(3),
      'access callback' => true,
      'type' => MENU_CALLBACK,
    ),
    'fedora' => array(
      'description' => 'Overrides the islandora call to Fedora',
      'page callback' => 'si_exhibition',
      'access callback' => true,
      'type' => MENU_CALLBACK,
    ),
    'fedora/repository' => array(
      'description' => 'Overrides the islandora call to a Fedora repository',
      'page callback' => 'si_exhibition',
      'access callback' => true,
      'type' => MENU_CALLBACK,
    ),
    'fedora/download/%' => array(
      'description' => 'Overrides the islandora call to a Fedora repository',
      'page callback' => 'si_exhibition_get_obj_datastream_content',
      'page arguments' => array(2),
      'access callback' => true,
      'type' => MENU_CALLBACK,
    ),
    'forward_open_access' => array(
      'description' => 'Forwards a call directly to the open_access workbench',
      'page callback' => 'si_exhibition_forward_open_access',
      'access callback' => true,
      'type' => MENU_CALLBACK,
    ),
    'cache' => array(
      'title' => 'Clear exhibition cache',
      'description' => 'clear the exhibition cache',
      'page callback' => 'si_exhibition_clear_cache',
      'access callback' => true,
      'type' => MENU_CALLBACK,
    ),
  );
}

function si_exhibition_clear_cache(){
	cache_clear_all('si_exhibition_cache_','cache',TRUE);
	array_map('unlink', glob(drupal_realpath('public://') .'/pid_tree*.html'));
	watchdog("exhibition",'clear_cache, cleared');
}
 
 /**
 * Implements hook_theme().
 */
function si_exhibition_theme($existing, $type, $theme, $path) {
  return array(
    'page_exhibition' => array(
      'render element' => 'page',
      'template' => '../../themes/smithsonian-theme/templates/page',
    ),
    'si_exhibition_object' => array(
      'file' => 'si_exhibition.theme.inc',
      'template' => 'templates/si-exhibition-object',
      'variables' => array(
        'object' => NULL
      ),
    ),
    'si_exhibition_flexpaper' => array(
      'file' => 'si_exhibition.theme.inc',
      'template' => 'templates/si-exhibition-flexpaper',
      'variables' => array(
        'pid' => NULL
      ),
    ),
    'si_exhibition_parent_concepts' => array(
      'file' => 'si_exhibition.theme.inc',
      'variables' => array(
        'object' => NULL
      ),
    ),
    'si_exhibition_child_concepts' => array(
      'file' => 'si_exhibition.theme.inc',
      'variables' => array(
        'object' => NULL
      ),
    ),
    'si_exhibition_parent_concepts_optimum' => array(
      'file' => 'si_exhibition.theme.inc',
      'variables' => array(
        'object' => NULL
      ),
    ),
    'si_exhibition_child_concepts_optimum' => array(
      'file' => 'si_exhibition.theme.inc',
      'variables' => array(
        'object' => NULL
      ),
    ),
    'si_exhibition_navigation' => array(
      'file' => 'si_exhibition.theme.inc',
      'variables' => array(
        'object' => NULL
      ),
    ),
    'si_exhibition_resources' => array(
      'file' => 'si_exhibition.theme.inc',
      'template' => 'templates/si-exhibition-resources',
      'variables' => array(
        'object' => NULL
      ),
    ),
    'si_exhibition_resource_table' => array(
      'file' => 'si_exhibition.theme.inc',
      'variables' => array(
        'resources' => NULL
      ),
    ),
    'si_exhibition_metadata_xmls' => array(
      'file' => 'si_exhibition.theme.inc',
      'variables' => array(
        'object' => NULL
      ),
    ),
    'si_exhibition_metadata' => array(
      'file' => 'si_exhibition.theme.inc',
      'variables' => array(
        'object' => NULL
      ),
    ),
    'si_exhibition_text_datastream' => array(
      'file' => 'si_exhibition.theme.inc',
      'variables' => array(
        'object' => NULL
      ),
    ),
    'si_exhibition_csv_datastream' => array(
      'file' => 'si_exhibition.theme.inc',
      'arguments' => array(
        'object' => NULL
      ),
    ),
    'si_exhibition_page_title' => array(
      'file' => 'si_exhibition.theme.inc',
      'variables' => array(
        'object' => NULL
      ),
    )
  );
}

/**
 * Implementation of hook_block_info().
 */
function si_exhibition_block_info() {
  $blocks = array();

  if (($expose_block = variable_get('si_exhibition_expose_block', 'no')) == 'no') {
    return $blocks;
  }

  $base = array(
    'cache' => DRUPAL_NO_CACHE,
    'status' => 1,
    //'visibility' => BLOCK_VISIBILITY_NOTLISTED,
  );

  $blocks['seu_nav'] = $base + array(
    'info' => t('SI Navigation'),
  );
  $blocks['seu_parent'] = $base + array(
    'info' => t('SI Parent Concepts Navigation'),
  );
  $blocks['seu_child'] = $base + array(
    'info' => t('SI Child Concepts Navigation'),
  );
  $blocks['seu_f'] = $base + array(
    'info' => t('SI Exhibition User Footer'),
  );
  $blocks['seu_h'] = $base + array(
    'info' => t('SI Exhibition User Header'),
  );
  $blocks['seu_pre'] = $base + array(
    'info' => t('SI Exhibition User Pre-Content'),
  );
  $blocks['seu_post'] = $base + array(
    'info' => t('SI Exhibition User Post-Content'),
  );
  $blocks['seu_sf'] = $base + array(
    'info' => t('SI Exhibition User Sidebar First'),
  );
  $blocks['seu_sl'] = $base + array(
    'info' => t('SI Exhibition User Sidebar Last'),
  );
  $blocks['seu_nav_first'] = $base + array(
    'info' => t('SI Exhibition Navigation (Left Top)'),
  );
  $blocks['seu_nav_last'] = $base + array(
    'info' => t('SI Exhibition Navigation (Right Top)'),
  );
  $blocks['seu_nav_first_bottom'] = $base + array(
    'info' => t('SI Exhibition Navigation (Left Bottom)'),
  );
  $blocks['seu_nav_last_bottom'] = $base + array(
    'info' => t('SI Exhibition Navigation (Right Bottom)'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function si_exhibition_block_view($delta='') {
	$forbidden = false;
  $not_found = false;
  $header = drupal_get_http_header('Status');

  switch ($header) {
    case '403 Forbidden':
      $forbidden = true;
      break;

    case '404 Not Found':
      $not_found = true;
      break;
  }

  // Only ever display in /fedora/* when the user has access and the resource exists.
  if (arg(0) == 'fedora' && !$forbidden && !$not_found) {
    $pptsc = si_exhibition_get_pid_path_to_showing_concept();
    $pid_for_config = array_shift($pptsc);
    $pid = (arg(2) ? arg(2) : variable_get('fedora_repository_pid', 'si:root'));

    switch ($delta) {
      case "seu_nav":
        $block = array(
          'subject' => t('SI Navigation'),
          'content' => theme('si_exhibition_navigation', array('pid'=>$pid)),
        );
        break;
      case "seu_parent":
        $block = array(
          'subject' => t('SI Parent Concepts'),
          'content' => theme('si_exhibition_parent_concepts', array('pid'=>$pid)),
        );
        break;
      case "seu_child":
        $block = array(
          'subject' => t('SI Child Concepts'),
          'content' => theme('si_exhibition_child_concepts', array('pid'=>$pid)),
        );
        break;
      default:
        $path = filter_input(INPUT_GET, 'path');
        //if we have a path, make sure we can access that path
        if (!empty($path)){
          $path_list = explode(',',$path);
          if (!empty($path_list[0])){
            $pid_for_config = $path_list[0];
          }
        }
        $se = si_exhibition_get_item_display_config($pid_for_config, arg(2));
        $block = array(
          'subject' => '',
          'content' => (isset($se[$delta])?$se[$delta]:''),
        );
        
        break;
    }

    return $block;
  }
}
function _si_current_pid_to_show() {
  $pid_for_config = NULL;
  $path = filter_input(INPUT_GET, 'path');
  //if we have a path, make sure we can access that path
  if (!empty($path)){
    $path_list = explode(',',$path);
    if (!empty($path_list[0])){
      $pid_for_config = $path_list[0];
    }
  }
  if (empty($pid_for_config)) return arg(2);
  return $pid_for_config;
}
/*
 * Return if this exhibition should be shown
 */
function _si_show_exhibition(){
  $pid_on_url = arg(2); 
  watchdog("exhibition",'_si_show_exhibition, checking for :'.$pid_on_url);
  require_once ( dirname(__FILE__) . '/si_exhibition.util.inc');
  $path = filter_input(INPUT_GET, 'path');
  //Start cache check for return
  $cache_name = 'show_exhibition';
  $cache_index = $pid_on_url.'_'.$path;
  $to_return = si_exhibition_cache($cache_name,$cache_index);
  if (!empty($to_return)){ return $to_return; }
  si_exhibition_cron_cache(__FUNCTION__, func_get_args());
  //End cache

  // $bad_path and $bad_path_set are just for this function if caching is turned off
  global $bad_path_set;
  global $bad_path;
  if ($bad_path_set) return !$bad_path;
  $tree_pid_list = array();
  $bad_path = false;
  if (!empty($path)){
    $path_list = explode(',',$path);
    if (!empty($path_list[0])){
      $path_to_pid = array($path_list[0]);
     //$tree = _si_exhibition_get_pid_tree($path_list[0], null, $tree_pid_list);
      $tree = '';
			if (variable_get('si_exhibition_file_cache', FALSE)) $tree = _si_exhibition_get_pid_tree_from_cache($path_list[0]);
			if (empty($tree)) {
			  $tree = _si_exhibition_get_pid_tree_optimum($path_list[0], null, $tree_pid_list,$path_to_pid);
				if (variable_get('si_exhibition_file_cache', FALSE)) {
				  $return_from_write = _si_exhibition_get_pid_tree_to_cache($path_list[0],$tree);
          watchdog("exhibition",'_si_show_exhibition, writing to file cache :'.$return_from_write);
				}	
			}
			else {
			  _si_exhibition_get_pid_list_from_tree(array($tree),$tree_pid_list);
			}	
			if (!in_array($pid_on_url,$tree_pid_list)){
        $bad_path = true;
      }
    }
    try{
      // See if this is a resource of the final item in the path
      $pid_array_values = array_values(array_slice($path_list, -1));
      if (is_array($pid_array_values)){
        $possible_parent_pid = $pid_array_values[0];
        $children = si_exhibition_get_child_resource_info_by_id($possible_parent_pid);
        if (is_array($children)) {
          foreach($children as $child) {
            if ($child['pid'] == $pid_on_url) {
              $bad_path = false;
            }
          }
        }
      }
      else {
        $bad_path = true;
      }
    } catch(Exception $e) {
      watchdog('exhibition', '_si_show_exhibition page exception:'.$e->getMessage().'  '.$e->getTraceAsString());
      exit();
    }
 
  }

  $to_return = !($bad_path);
  $cached = si_exhibition_cache($cache_name, $cache_index, $to_return);
  /*
    var_dump($path_list);
    var_dump($tree);
    print "TPL:";
    var_dump($tree_pid_list);
    var_dump($bad_path);
    var_dump($cached);
    exit();
  */
  return $cached;
}


/**
 * Implementation of hook_preprocess_page().
 */
function si_exhibition_preprocess_page(&$variables) {
  si_exhibition_update_js($variables);
  $headers = drupal_get_http_header();
  $forbidden = array_search('HTTP/1.1 403 Forbidden', $headers) !== FALSE;
  $not_found = array_search('HTTP/1.1 404 Not Found', $headers) !== FALSE;
  if (arg(0) == 'fedora' && arg(1) == 'repository'  && !$forbidden && !$not_found) {
    $variables['theme_hook_suggestions'][] = 'page_exhibition';
    $variables['title'] = NULL; // Title is displayed as part of the page content.
    $se = array();
    $pptsc = si_exhibition_get_pid_path_to_showing_concept();
    $pid_for_config = array_shift($pptsc);
    try {
      $se = si_exhibition_get_item_display_config($pid_for_config, arg(2));
      if ($se['error'] == true) {
        $show_exhibition = false;
      }
      //logo is the image
      //site_slogan is under the name
      //site_name is the main name
      if (!empty($se)){
        if (array_key_exists('logo', $se)) $variables['logo'] = $se['logo']; else $variables['logo'] = '';
        if (array_key_exists('title', $se)) $variables['site_name'] = $se['title']; else $variables['site_name'] = '';
        //$variables['site_slogan'] = ' sitey slogany'.arg(2);
        $variables['sidora_exhibition'] = $se;
        $mto = menu_tree_output(menu_tree_all_data('main-menu'));
        $variables['primary_links_tree'] = drupal_render($mto);
      }
    } catch(Exception $e) {
      watchdog('exhibition', 'si_exhibition_preprocess page exception:'.$e->getMessage().'  '.$e->getTraceAsString());
      exit();
    }
  }
}
function si_exhibition_get_tn($pid = NULL, $dsid  = NULL) {
  require_once ( dirname(__FILE__) . '/si_exhibition.util.inc');
  $pid = isset($pid) ? $pid : variable_get('fedora_repository_pid', 'si:root');
  $object = sidora_obj($pid);
  drupal_add_css(drupal_get_path('module', 'si_exhibition') . '/css/si-exhibition.css');
  $jstreepath = variable_get('sidora_js_lib_location_jstree', '');
  drupal_add_css($jstreepath . 'themes/default/style.min.css', array('type' => 'external'));
  if (variable_get('si_exhibition_anonymous_only', FALSE)){
    if (!si_exhibition_check_view_permission($pid)){
      watchdog('exhibition', 'si_exhibition_check_view_permission for:'.$pid.' was false');
      si_exhibition_debug('View permission false:'.$pid);
      if ($GLOBALS['print_debug_lines']) print __LINE__ . ' of ' . __FILE__;
      return MENU_NOT_FOUND;
    }
  }
  //"Magic" value "sidora_viewer" will use the viewer settings
  if ($dsid != NULL && !empty($object) && (!empty($object[$dsid]))) {
    $datastream = $object[$dsid];
    $content = $datastream->content;
      if (isset($_SERVER['HTTP_RANGE'])) {
       si_exhibition_deliver_streaming($pid, $dsid);
       exit();
      }
      header("Content-Type: ".$object[$dsid]->mimetype);
      print $object[$dsid]->content;
    exit();
  }
  else {
    return MENU_NOT_FOUND;
  }
}
/**
 * Menu callback that replaces the default callback for fedora/repository.
 */
function si_exhibition($pid = NULL, $dsid = NULL) {
  if ($dsid == NULL) {
    if (empty($_GET['time'])){
      $actual_link = "http://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]";
      if (count($_GET) == 1) { //the normal drupal q= param
        $actual_link .= '?';
      }
      $actual_link .= '&time=' . time();
      header('Location: ' . $actual_link );
      exit();
    }
  }
  require_once ( dirname(__FILE__) . '/si_exhibition.util.inc');
  $pid = isset($pid) ? $pid : variable_get('fedora_repository_pid', 'si:root');
  $object = sidora_obj($pid);
  drupal_add_css(drupal_get_path('module', 'si_exhibition') . '/css/si-exhibition.css');
  $jstreepath = variable_get('sidora_js_lib_location_jstree', '');
  drupal_add_css($jstreepath . 'themes/default/style.min.css', array('type' => 'external'));
  if (variable_get('si_exhibition_anonymous_only', FALSE)){
    if (!si_exhibition_check_view_permission($pid)){
      watchdog('exhibition', 'si_exhibition_check_view_permission for:'.$pid.' was false');
      si_exhibition_debug('View permission false:'.$pid);
      if ($GLOBALS['print_debug_lines']) print __LINE__ . ' of ' . __FILE__;
      return MENU_NOT_FOUND;
    }
  }
  if (!_si_show_exhibition()){
    watchdog('exhibition', '_si_show_exhibition for:'.$pid.' was false');
    si_exhibition_debug('Show exhibition explicitly false:'.$pid);
    if ($GLOBALS['print_debug_lines']) print __LINE__ . ' of ' . __FILE__;
    return MENU_NOT_FOUND; //drupal_not_found();
  }

  //Something should either be viewable via the xsl or downloadable with a file extension
  $xsl_config = si_exhibition_forward_direct_open_access(array('xsl_config', $pid), TRUE, FALSE);
  $file_extension = si_exhibition_forward_direct_open_access(array('file_extension', $pid), TRUE, FALSE);
  if (empty($xsl_config) && empty($file_extension)){
    si_exhibition_debug('xsl_config or file_extention empty:'.$pid);
    if ($GLOBALS['print_debug_lines']) print __LINE__ . ' of ' . __FILE__;
    return MENU_NOT_FOUND;
  }

  //"Magic" value "sidora_viewer" will use the viewer settings
  if ($dsid != NULL && !empty($object) && (!empty($object[$dsid]) || $dsid == 'sidora_viewer' )) {
    //RELS-EXT should never be able to be downloaded.  It contains too much structural information that may need
    //to be hidden
    if ($dsid == 'RELS-EXT') {
      si_exhibition_debug('Not allowed to use viewer directly on RELS-EXT datastream:'.$pid);
      if ($GLOBALS['print_debug_lines']) print __LINE__ . ' of ' . __FILE__;
      return MENU_NOT_FOUND;
    }
    //OBJ is special since that is to download the item, don't allow the OBJ datastream for
    //the generic previews
    if ($dsid == 'OBJ') {
      //Give specific access to some viewers.  Check the viewer for the object
      $viewer_config = si_exhibition_forward_direct_open_access(array('viewer_config', $object->id), FALSE, FALSE);
      if (empty($viewer_config)) {
        watchdog('exhibition','No viewer config for:'.$pid);
        drupal_exit();
      }
      $viewer = $viewer_config->viewer_id;
      $obj_can_be_used_with = array_map('trim', explode(',',  variable_get('si_exhibition_obj_allowed_for_viewers', ''))); 
      //Case-insensitive check
      $viewer_allowed_for_obj = in_array( strtolower($viewer), array_map('strtolower', $obj_can_be_used_with) );
      if ($viewer_allowed_for_obj) {
      }
      else {
        si_exhibition_debug('Not allowed to use viewer directly on OBJ datastream for this object:'.$pid);
        if ($GLOBALS['print_debug_lines']) print __LINE__ . ' of ' . __FILE__;
        return MENU_NOT_FOUND;
      }
    }

    require_once ( dirname(__FILE__) . '/si_exhibition.util.inc');
    //$vis_obj = si_exhibition_get_visibility_object($pid);
    $parent_pid_path = si_exhibition_get_pid_path_to_showing_concept();
    $vis_obj = si_exhibition_get_visibility_object_optimum($pid,$parent_pid_path);
     if (empty($vis_obj) || empty($vis_obj['show_preview'])) {
      si_exhibition_debug('Visibility object empty or show_preview was empty');
      if ($GLOBALS['print_debug_lines']) print __LINE__ . ' of ' . __FILE__;
      //  print $pid;
      //  var_dump($vis_obj);
      return MENU_NOT_FOUND;
    }
    
    $xsl_config = si_exhibition_forward_direct_open_access(array('xsl_config', $pid), TRUE, FALSE);
    if (!empty($xsl_config) && !empty($xsl_config->dsid)) {
      $specific_meta = $xsl_config->dsid;
      //This is the datastream that is considered for "show meta" so should only be allowed if show meta is allowed
      //In order to get through to show the direct meta, the setting must be "show_meta" (this code) and "show_preview" (lines above) as true
      if (empty($vis_obj['show_meta']) && ((string)$dsid === (string)$specific_meta)) {
        si_exhibition_debug('Show meta is not true, and the datastream requested is considered the metadata datastream:'.$pid.' '.$dsid);
        if ($GLOBALS['print_debug_lines']) print __LINE__ . ' of ' . __FILE__;
        return MENU_NOT_FOUND;
      }
    }

    //All others that come here are the "previews"

    //Here we know we "should" be able to see it
    if ($dsid == 'sidora_viewer'){
      si_exhibition_sidora_viewer($object);
    }
    else {
      //print $dsid;//$object[$dsid]->size;
      $datastream = $object[$dsid];
      //$datastream->populateDatastreamInfo();
      //$datastream->refresh();
      $datastream = $object[$dsid];
      $content = $datastream->content;
      if (isset($_SERVER['HTTP_RANGE'])) {
       si_exhibition_deliver_streaming($pid, $dsid);
       exit();
      }
      header("Content-Type: ".$object[$dsid]->mimetype);
      print $object[$dsid]->content;
    }
    exit();
  }
  if (!empty($object)){
    return theme('si_exhibition_object', array('object'=>$object));
    drupal_exit();
  }else{
    return MENU_NOT_FOUND;
  }
  
}
function sidora_obj($pid){
  $repo = tuque_wrapper_get_repository_instance();
  si_exhibition_debug('repo from si_exhibition');
  // Check if we can access the repository and the requested object.
  try {
    $description = $repo->api->a->describeRepository(); // Check for repository access
    $object = $repo->getObject($pid); // Check for object access
  } catch(Exception $e) {
    $code = $e->getCode();
    switch($code) {
      case '404':
        if(!isset($description)) { // Couldn't reach the repository.
          watchdog('exhibition', 'Could not reach Fedora repository');
          drupal_set_message(t('The Fedora repository server is currently unavailable. Please contact the site administrator.'), 'error', FALSE);
        }
        ob_start();
        var_dump($description);
        $desc_as_string = ob_get_clean();
        watchdog('exhibition', '404 error getting pid:'.$pid.'. Trying to get Fedora description, it described itself:'. $desc_as_string);
        //dsm('Could not reach Fedora');
        //drupal_not_found();
        if ($GLOBALS['print_debug_lines']) print __LINE__ . ' of ' . __FILE__;
        break;
      case '401':
      case '403':
        watchdog('exhibition', 'Access denied');
        drupal_access_denied();
        break;
      default:
        //drupal_set_message(t('An error occured when attempting to access the fedora repository. Please contact the site administrator.'), 'error', FALSE);
        $message = '%type: !message in %function (line %line of %file).';
        $backtrace = $e->getTrace();
        $caller = $backtrace[1];
        $variables = array(
          '%type' => get_class($e),
          '!message' => check_plain($e->getMessage()),
          '%function' => $caller['function'],
          '%file' => $caller['file'],
          '%line' => $caller['line']
        );
        watchdog('si_exhibition', $message, $variables, WATCHDOG_ERROR, NULL);
        //dsm('Islandora error');
        //drupal_not_found();
        if ($GLOBALS['print_debug_lines']) print __LINE__ . ' of ' . __FILE__;
        break;
    }
    exit();
  }
  return $object;
}
/**
 * Get a list of the viewer names that the exhibition knows how to deal with
 * @returns
 *   array of string names of viewers
 */
function si_exhibition_sidora_viewers_available() {
  return array(
    'pdfjs',
    'OpenSeaDragon',
    'PHPExcel',
    'JW Audio Player',
    'JW Video Player',
  );
}
/**
 * Controller for directing which viewer should be used for the input object
 *
 * @param $object 
 *  a fedora object (only uses $object->id though)
 * @returns
 *  nothing, hard exit or drupal_exit based on what happened
 */
function si_exhibition_sidora_viewer($object){
  global $base_url;
  $pid = $object->id;
  $viewer_config = si_exhibition_forward_direct_open_access(array('viewer_config', $object->id), FALSE, FALSE);
  if (empty($viewer_config)) {
    watchdog('exhibition','No viewer config for:'.$pid);
    drupal_exit();
  }
  module_load_include('inc', 'si_exhibition', 'includes/workbench_viewers');
  $viewer = $viewer_config->viewer_id;
  if (!in_array($viewer, si_exhibition_sidora_viewers_available())) {
    watchdog(
      'exhibition',
      'Viewer in the config sent by open_access is not configurable or not known. pid: %pid viewer_id: %view_id',
      array('%pid' => $pid, '%view_id' => $viewer)
    );
  }
  if ($viewer == 'OpenSeaDragon') {
    require_once ( dirname(__FILE__) . '/si_exhibition.util.inc');
    $parent_pid_path = si_exhibition_get_pid_path_to_showing_concept();
    $vis_obj = si_exhibition_get_visibility_object_optimum($pid,$parent_pid_path);
    if (!empty($vis_obj['show_degraded'])) $viewer = 'browser_degraded';
  }
  ob_start();
  print "Ready to display using the sidora_viewer:".$viewer;
  $debug_result = ob_get_clean();
  si_exhibition_debug($debug_result);
  $pptsc = si_exhibition_get_pid_path_to_showing_concept();
  $urlencodedpath = urlencode(implode($pptsc,","));
  $urlencodedpath_no_last = urlencode(implode(array_slice($pptsc,0,sizeof($pptsc)-1),","));
  switch ($viewer) {
    case 'pdfjs':
      drupal_goto(variable_get('sidora_pdf_js_location','').'?file='.$base_url.'/fedora/repository/'.$pid.'/OBJ%3Fpath%3D'.$urlencodedpath_no_last);
      drupal_exit();
      break;
    case 'OpenSeaDragon':
      sidora_view_openseadragon($pid, 'OBJ', '0');
      break;
    case 'PHPExcel':
      sidora_tabular_view_phpexcelreader($pid,'OBJ');
      break;
    case 'JW Audio Player':
      si_exhibition_jw_player($pid, 'PROXY_MP3/file_name_spoof.mp3?path='.$urlencodedpath_no_last, $urlencodedpath_no_last);
      break;
    case 'JW Video Player':
      si_exhibition_jw_player($pid, 'MP4/file_name_spoof.mp4?path='.$urlencodedpath_no_last, $urlencodedpath_no_last);
      break;
    case 'browser_degraded':
      $debug_result = ob_get_clean();
      si_exhibition_debug($debug_result);
      $level = si_exhibition_get_degradation_level($pid);
      ob_start();
      sidora_view_degraded_img($pid, 'OBJ', '0', $level);
      break;
    default:
      echo $viewer;
      break;
  }
  exit();
}
function si_exhibition_jw_player($pid, $file_path, $path_no_last){
  if (strpos($pid, ':') !== FALSE) $pid = urlencode($pid);
  global $base_url;
  print '
<script type="text/javascript" src="' . $base_url . '/' . libraries_get_path('jwplayer') . '/jwplayer.js"></script>
<script type="text/javascript">
document.addEventListener("DOMContentLoaded",function() {
  jwplayer("mediaplayer").setup({
    file: "'.$base_url.'/fedora/repository/'.$pid.'/'.$file_path.'",
    image: "'.$base_url.'/fedora/repository/'.$pid.'/TN/tn.jpg?path='.$path_no_last.'",
    width: "480",
    height: "270",
    logo : { hide: "true" }
  });
});
</script>
<div style="width:100%;height:100%;">
  <div style="background-color: #F2F2F2;  border: 1px solid #ddd;  -webkit-border-radius: 5px;  -moz-border-radius: 5px;  border-radius: 5px;  padding: 15px;  width: 480px;  max-width: 100%;margin: auto;/* height: 100px; */position: relative;top: 50%;transform: translateY(-50%);">
    <div id="mediaplayer">Loading JW Player...</div>
  </div>
</div>
';

}
/*
 * The hook_menu call for open_access calls from the browser (javascript)
 */
function si_exhibition_forward_open_access($access_type, $pid = ''){
  return si_exhibition_forward_direct_open_access( array( $access_type, $pid ) ); 
}
/*
 * Used by the code to make direct calls to the workbench open_access protocol
 */
function si_exhibition_forward_direct_open_access($callback_args, $raw = TRUE, $exit = TRUE, $get_params = TRUE){
  //Pull the info about the viewer for the object
  
  $url_to_get = variable_get('si_exhibition_workbench_xsl', '');
$url_to_get .= implode('/' , array_map('urlencode',$callback_args));
  if ($get_params){
    $url_to_get .= '?' . $_SERVER['QUERY_STRING'];
  }
  $ch = curl_init();
  $timeout = 60;
  if (strpos($url_to_get, '?') === FALSE) {
    curl_setopt($ch, CURLOPT_URL, $url_to_get);//.'?time='.time());
  }
  else {
    curl_setopt($ch, CURLOPT_URL, $url_to_get);//.'&time='.time());
  }
  //curl_setopt($ch, CURLOPT_URL, $url_to_get);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); //BBB TODO REMOVE
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); //BBB TODO REMOVE
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
  $data = curl_exec($ch);

  if ($data === FALSE){
    $curl_error_string = curl_error($ch);
    print 'Could not obtain data from:'.$url_to_get.'<br/>'."\n";
    print $curl_error_string.'<br/>'."\n";
    $info = curl_getinfo($ch);
    print_r ($info);
    curl_close($ch);
    $se = array();
    $se['error'] = $curl_error_string;
    $_REQUEST['store_pid_config_'.$pid] = $se;
    if ($exit) {
      watchdog('exhibition','Open access errored on:'.$url_to_get);
      drupal_exit();
    }
    return $se;
  }
      /*
      ob_start();
      print "Success on open access call\n";
      var_dump($ch);
      var_dump(curl_error($ch));
      var_dump(curl_getinfo($ch));
      $debug_result = ob_get_clean();
      si_exhibition_sidora_debug($debug_result, curl_getinfo($ch));
      */

  curl_close($ch);
  if ($raw){
    if ($exit) {
      print ($data);
      drupal_exit();
    }
    return $data;
  }
  $se = json_decode($data);
  if ($exit) {
    drupal_exit();
  }
  return $se;
}
/*
 * Intended to determine if this should be viewable, but right now 
 * just checks to see if the pid is valid
 */
function si_exhibition_check_view_permission($object_pid) {
  $xacml_dsid = 'POLICY';
  // when we call in from top level collections in JS get get the
  // pid being undefined
  if($object_pid == 'undefined' || !$object_pid) {
    $object_pid = variable_get('fedora_repository_pid', 'islandora:top');
  }
  return true;
  /*
  XACML code unused

  $object = new Fedora_Item($object_pid);
  if(!$object->exists()) {
    return false;
  }
  $datastreams = $object->get_datastreams_list_as_array();
  module_load_include('inc', 'fedora_repository', 'ContentModel');
  if(array_key_exists($xacml_dsid, $datastreams)) {
    module_load_include('inc', 'islandora_xacml_api', 'XacmlException');
    // here we populate the form
    $xml = $object->get_datastream_dissemination($xacml_dsid);
    // some basic error handling
    try {
      $xacml = new Xacml($xml);
    }
    catch(XacmlException $e) {
      return false;
    }
    $view_user_list = ($xacml->viewingRule->getUsers());
    foreach($view_user_list as $view_user){
      if ($view_user == 'anonymous'){
        return true;
      }
    }
  }
  return false;
  */
}
function si_exhibition_meta_string_for_xslt_by_id($pid){
  $xsl_config = '';
  if (!empty($pid)){
    $url_to_get =
      variable_get('si_exhibition_workbench_xsl', '')
      . 'xsl_config/' .
      urlencode($pid);
    $ch = curl_init();
    $timeout = 60;
    if (strpos($url_to_get, '?') === FALSE) {
      curl_setopt($ch, CURLOPT_URL, $url_to_get);//.'?time='.time());
    }
    else {
      curl_setopt($ch, CURLOPT_URL, $url_to_get);//.'&time='.time());
    }
    //curl_setopt($ch, CURLOPT_URL, $url_to_get);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); //BBB TODO REMOVE
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); //BBB TODO REMOVE
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
    $data = curl_exec($ch);

    //echo 'si_exhibition.module: line 1534<br><pre>' . print_r($data, true) . '</pre>';

    if ($data === FALSE){
      $curl_error_string = curl_error($ch);
      print 'Could not obtain data from:'.$url_to_get.'<br/>'."\n";
      print $curl_error_string.'<br/>'."\n";
      $info = curl_getinfo($ch);
      print_r ($info);
      curl_close($ch);
      $se = array();
      $se['error'] = $curl_error_string;
      $_REQUEST['store_pid_config_'.$pid] = $se;
      return $se;
    }
      /*
      ob_start();
      print "Success on meta string for xslt\n";
      var_dump($ch);
      var_dump(curl_error($ch));
      var_dump(curl_getinfo($ch));
      $debug_result = ob_get_clean();
      si_exhibition_sidora_debug($debug_result, curl_getinfo($ch));
      */

    curl_close($ch);
    $xsl_config = json_decode($data);
  }
  $specific_meta = '';
  if (!empty($xsl_config)){
    $specific_meta = $xsl_config->dsid;
  }
  $datastream_content = '';
  $object = sidora_obj($pid);
  if (empty($specific_meta)){
    foreach($object as $dsid_loop=>$datastream_loop){
      //strip off the <?xml directives if it has any and remove binary data
      $content = $datastream_loop->content;
      $doc = new DOMDocument();
      if (substr(trim($content),0,1) == '<'){
        $doc->loadXML($content);
        $datastream_content .= $doc->saveHTML();
      }
    }
    $datastream_content = '<xml_root><general_info><owner>'.$object->owner.'</owner><label>'.$object->label.'</label></general_info>'."\n".$datastream_content."\n".'</xml_root>';
  }else{
    $datastream_content = $object[$specific_meta]->content;
  }
  return $datastream_content;
}
/**
 * Menu callback for redirecting to a specific page.
 *
 */
function si_exhibition_custom_url($cu) {
  require_once ( dirname(__FILE__) . '/si_exhibition.util.inc');
  if ($cu == 'test')  {
    var_dump( si_exhibition_get_visibility_tree(''));
    var_dump(si_exhibition_get_pid_path_to_showing_concept());
    print '<a href="./si:valid?path=si:1,h:2,y:3">go</a> ';
    print '<a href="./download">nogo</a>';
    drupal_exit();
  }
  $url =
    variable_get('si_exhibition_data_url', '').
    'custom_url'.'/'.
    $cu;
  $my_pid = file_get_contents( $url  );
  drupal_goto('fedora/repository/'.$my_pid);
}
/*
 * Returns the xsl we are using directly to the browser
 */
function si_exhibition_xsl(){
  header('Content-Type: text/xml');
  print si_exhibition_xsl_string();
  exit();
}
/*
 * Get the xsl string to transform the metadata
 */
function si_exhibition_xsl_string($pid){
  $my_xsl = '';
  if (!empty($pid)){
    $url_to_get =
      variable_get('si_exhibition_workbench_xsl', '')
      . 'xsl/' .
      urlencode($pid);
    $ch = curl_init();
    $timeout = 60;
    if (strpos($url_to_get, '?') === FALSE) {
      curl_setopt($ch, CURLOPT_URL, $url_to_get);//.'?time='.time());
    }
    else {
      curl_setopt($ch, CURLOPT_URL, $url_to_get);//.'&time='.time());
    }
    //curl_setopt($ch, CURLOPT_URL, $url_to_get);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); //BBB TODO REMOVE
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); //BBB TODO REMOVE
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
    $data = curl_exec($ch);

    //echo 'si_exhibition.module: line 1534<br><pre>' . print_r($data, true) . '</pre>';

    if ($data === FALSE){
      $curl_error_string = curl_error($ch);
      print 'Could not obtain data from:'.$url_to_get.'<br/>'."\n";
      print $curl_error_string.'<br/>'."\n";
      $info = curl_getinfo($ch);
      print_r ($info);
      curl_close($ch);
      $se = array();
      $se['error'] = $curl_error_string;
      $_REQUEST['store_pid_config_'.$pid] = $se;
      return FALSE;
    }
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    if($httpCode == 404) {
      /*
      ob_start();
      print "404 on call to get XSL\n";
      var_dump($ch);
      var_dump(curl_error($ch));
      var_dump(curl_getinfo($ch));
      $debug_result = ob_get_clean();
      si_exhibition_sidora_debug($debug_result, curl_getinfo($ch));
      */
      //dsm("404'd: $url_to_get");
      return FALSE;
    }
    /*
    ob_start();
    print "Successful call to get XSL\n";
    var_dump($ch);
    var_dump(curl_error($ch));
    var_dump(curl_getinfo($ch));
    $debug_result = ob_get_clean();
    si_exhibition_sidora_debug($debug_result, curl_getinfo($ch));
    */
    curl_close($ch);
    $my_xsl = $data;

  }
  if (empty($my_xsl)){ 
    return variable_get('si_exhibition_metadata_xsl',si_exhibition_xsl_string_default());
  }else{
    return $my_xsl;
  }
}
/*
 * Return a hard-coded built in xsl string (for first install mostly)
 */
function si_exhibition_xsl_string_default(){
  return '<?xml version="1.0" encoding="UTF-8"?'.'>

<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
xmlns:mods="http://www.loc.gov/mods/v3"
xmlns:fits="http://hul.harvard.edu/ois/xml/ns/fits/fits_output"
xmlns:cpf="urn:isbn:1-931666-33-4"
>

<xsl:template match="/">
  <html>
  <body>
  <table class="metadata-table">
    <xsl:for-each select="xml_root/debug">
    <tr>
      <td>Debug</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:for-each>
    <xsl:for-each select="//mods:abstract">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Description</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
 <xsl:for-each select="//mods:subject/mods:topic">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Topic</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
 <xsl:for-each select="//mods:subject/mods:geographic">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Geographic</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:name">
      <xsl:for-each select="mods:namePart">
        <xsl:if test="current()!=\'\'">
        <tr>
          <td>Name</td>
          <td><xsl:value-of select="current()"/></td>
        </tr>
        </xsl:if>
      </xsl:for-each>
      <xsl:for-each select="mods:role/mods:roleTerm">
        <xsl:if test="current()!=\'\'">
        <tr>
          <td>Role</td>
          <td><xsl:value-of select="current()"/></td>
        </tr>
        </xsl:if>
      </xsl:for-each>
    </xsl:for-each>
 <xsl:for-each select="//mods:identifier">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Identifier</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
 <xsl:for-each select="//mods:genre">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Genre</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
 <xsl:for-each select="//mods:note[not(@*)]">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Note</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
 <xsl:for-each select="//mods:originInfo/mods:dateCaptured">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Date Captured</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
 <xsl:for-each select="//mods:physicalLocation">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Physical Location</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
 <xsl:for-each select="//mods:copyInformation/mods:subLocation">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Sub Location</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//fits:fileinfo/fits:created[@toolname=\'Exiftool\']">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Image Capture Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//citeinfo/title">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Camera Site Name</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//citeinfo/othercit">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Camera Deployment ID</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//citeinfo/origin">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Originator</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//citeinfo/geoform">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Format of Geospatial Data</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//descript/abstract">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Camera Deployment Note</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//descript/supplinf">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Purposed Lat and Long</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/horizsys/geograph/latres">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Actual Latitude</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/horizsys/geograph/longres">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Actual Longitude</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//dataqual/lineage/procstep[procdesc=\'Proposed Camera Deployment Begin Date\']/procdate">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Proposed Camera Deployment Begin Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//dataqual/lineage/procstep[procdesc=\'Proposed Camera Deployment End Date\']/procdate">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Proposed Camera Deployment End Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//timeinfo/rngdates/begdate">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Camera Deployment Begin Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//timeinfo/rngdates/enddate">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Camera Deployment End Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//detailed/attr[attrlabl=\'Camera ID\']/attrdomv/edom/edomv">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Camera ID</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//detailed/attr[attrlabl=\'Image Resolution Setting\']/attrdomv/edom/edomv">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Image Resolution Setting</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//detailed/attr[attrlabl=\'Detection Distance\']/attrdomv/edom/edomv">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Detection Distance</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//detailed/attr[attrlabl=\'Sensitivity Setting\']/attrdomv/edom/edomv">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Sensitivity Setting</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//detailed/attr[attrlabl=\'Quiet Period Setting\']/attrdomv/edom/edomv">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Quiet Period Setting</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//detailed/attr[attrlabl=\'Camera Height\']/attrdomv/edom/edomv">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Camera Height</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//detailed/attr[attrlabl=\'Habitat Type\']/attrdomv/edom/edomv">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Habitat Type</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//theme/themekey">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Theme Keyword</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//place/placekey">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Place Keyword</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//keywtax/taxonkey">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Taxonomic Keyword</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//taxoncl/taxonrn">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Taxonomic Rank Name</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//taxoncl/taxonrv">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Taxonomic Rank Value</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//idinfo/accconst">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Access Constraints</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//idinfo/useconst">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Use Constraints</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//idinfo/datacred">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Data Set Credit</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//dataqual/complete">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Camera Failure Details</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//method[methtype=\'Bait\']/methodid/methkey">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Bait Type</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//method[methtype=\'Bait\']/methdesc">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Bait Methodology</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//method[methtype=\'feature\']/methodid/methkey">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Feature</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//method[methtype=\'feature\']/methodid/methdesc">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Feature Description</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/horizsys/geograph/latres">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Actual Latitude</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/horizsys/geograph/longres">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Actual Longitude</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/horizsys/geograph/geogunit">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Geographic Coordinate Units</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/vertdef/altsys/altdatum">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Altitude Datum Name</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/vertdef/altsys/altres">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Elevation</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/vertdef/altsys/altunits">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Altitude Distace Units</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/vertdef/altsys/altenc">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Altitude Encoding Method</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metd">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Metadata Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metrd">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Metadata Review Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metfrd">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Metadata Future Review Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntperp/cntper">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Contact Person</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntperp/cntorg">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Organization Name</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntaddr/address">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Address</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntaddr/city">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>City</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntaddr/state">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>State</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntaddr/postal">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Postal Code</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntvoice">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Phone</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntemail">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Email</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metstdn">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Metadata Standard Name</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metstdv">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Metadata Standard Version</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:titleInfo[@type=\'\']/mods:title">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Title</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:titleInfo[@type=\'alternative\']/mods:title">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Alternative Title</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:titleInfo[@type=\'uniform\']/mods:title">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Uniform Title</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:titleInfo[@type=\'translated\']/mods:title">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Translated Title</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:titleInfo[@type=\'abbreviated\']/mods:title">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Abbreviated Title</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:identifier[not(@type)]">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Item ID</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:identifier[@type=\'accessionNumber\']">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Accession / RU</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:role[mods:roleTerm = \'Creator\']/../../mods:name/mods:namePart">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Creator</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:role[mods:roleTerm = \'Contributor\']/../../mods:name/mods:namePart">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Contributor</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:typeOfResource">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Type of Resource</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:genre">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Genre</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:abstract">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Description</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:dateOther[@type=\'range\' and not(@point)]">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Date Range</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:dateOther[@point=\'start\']">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Start Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:dateOther[@point=\'end\']">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>End Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:dateOther/@qualifier">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Date Qualifier</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:location/mods:physicalLocation">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Location</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:shelfLocator">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Shelf Locator</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:url">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>URL</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subLocation">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Sub Location</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:physicalDescription/mods:form">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Physical Description</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:recordInfo/mods:recordOrigin">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Record Creator</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:recordInfo/mods:recordContentSource">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Institute Creator</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:recordInfo/mods:recordCreationDate">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Creation Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:recordInfo/mods:recordChangeDate">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Change Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:accessCondition">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Access Condition</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:note">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Note</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:topic">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Topic</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:geographic">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Geographic Subject</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:hierarchicalGeographic/mods:continent">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Continent</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:hierarchicalGeographic/mods:country">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Country</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:hierarchicalGeographic/mods:province">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>State</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:hierarchicalGeographic/mods:region">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Region</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:hierarchicalGeographic/mods:county">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>County</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:hierarchicalGeographic/mods:city">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>City</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:hierarchicalGeographic/mods:citySection">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>City Section</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:cartographics/mods:coordinates">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Coordinates</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:name[@type=\'conference\']/mods:namePart">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Expedition Name</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:name[@type=\'corporate\' and @displayLabel=\'Vessel\']/mods:namePart">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Vessel Name</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:name[@type=\'corporate\' and @displayLabel=\'Organization\']/mods:namePart">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Organization Name</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:name[@type=\'personal\']/mods:namePart">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Person Name</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:relatedItem/mods:titleInfo/mods:title">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Related Collection Name</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:relatedItem/mods:identifier">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Related Collection ID</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:language/mods:languageTerm[@type=\'text\']">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Language</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:language/mods:scriptTerm[@type=\'text\']">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Script</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//cpf:nameEntry[@localType=\'primary\']/cpf:part">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Project Name (Full)</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//cpf:nameEntry[@localType=\'abbreviation\']/cpf:part">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Project Name (Abbreviation)</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//cpf:function/cpf:descriptiveNote/cpf:p">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>//cpf:function/cpf:term</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//cpf:existDates/cpf:dateRange/cpf:fromDate">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Begin Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//cpf:existDates/cpf:dateRange/cpf:toDate">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>End Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//cpf:place/cpf:placeEntry[@localType=\'address\']">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Project Location</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//cpf:place/cpf:placeEntry[@localType=\'region\']">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Region</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>









  </table>
  </body>
  </html>
</xsl:template>

</xsl:stylesheet>
';
}

/**
 * Menu callback for returning a datastream from a resource.
 *
 * @return json
 *  A JSON object with on field 'output' which contains an html repersentation of the datastream.
 */
function si_exhibition_get_datastream_as_json() {
  $pid = $_GET['pid'];
  $dsid = $_GET['dsid'];
  // List of viewable data streams directly from the URL
  $theme = array(
    'METADATA' => 'si_exhibition_metadata', 
    'METADATA_XMLS' => 'si_exhibition_metadata_xmls'
  );
  $output = isset($theme[$dsid]) ? theme($theme[$dsid], array('pid'=>$pid)) : t('An Error Occured.');
  if ($dsid == 'METADATA_XMLS' && empty($_GET['nocontenttype'])) {
    header("Content-type: text/xml");
  }
  print json_encode(array('output' => $output));
  drupal_exit();
}

/**
 * Menu callback, renders the OBJ.swf datastream of the given object.
 *
 * @return string
 *  FlexPaper HTML page to be displayed in an iframe.
 */
function si_exhibition_flexpaper($pid) {
  if ($pid == 'FlexPaperViewer.swf') {
    drupal_goto('sites/all/libraries/flexpaper/FlexPaperViewer.swf');
  }
  print theme('si_exhibition_flexpaper', $pid);
  exit;
}

/*
function si_exhibition_theme_registry_alter(&$theme_registry) {
  $theme_hook = 'page'; // my hook name
  // Get the path to this module
  $modulepath = drupal_get_path('module', 'si_exhibition');
  // Add the module path on top in the array of paths
  array_unshift($theme_registry[$theme_hook]['theme paths'], $modulepath);
}
*/
/*
 * Set the javascript that is necessary for the exhibition, unsetting existing jQuerys
 */
function si_exhibition_update_js(&$variables) {
  // Get scripts
  $scripts = drupal_add_js();

  // Unset jquery from core
  unset($scripts['misc/jquery.js']);
  unset($scripts['misc/jquery.once.js']);

  // Put a new jquery into core
  $modulepath = drupal_get_path('module', 'si_exhibition');
  $jstreepath = variable_get('sidora_js_lib_location_jstree', '');
  drupal_add_js($modulepath.'/js/jquery-1.11.0.min.js');
  drupal_add_js($modulepath.'/js/jquery.browser.compat.js');
  drupal_add_js($modulepath.'/js/jquery.once.min.js');
  drupal_add_js($jstreepath.'jstree.min.js');
  drupal_add_js($modulepath.'/js/si_exhibition.js');
}
/*
 * Add the ability to debug the curl requests
 */
function si_exhibition_sidora_debug($debug_string, $cgi = NULL) {
  $debug_string .= microtime();
  $sidora_debug = !empty($_GET['sidora_debug']);
  if ($sidora_debug) $sidora_debug = $_GET['sidora_debug']; 
  if ($cgi != NULL) {
    if (!empty($_GET['sidora_filter_timing'])) {
      $sidora_filter_timing = $_GET['sidora_filter_timing'];
      if (!empty($cgi['starttransfer_time'])) {
        if (floatval($sidora_filter_timing) > floatval($cgi['starttransfer_time'])) {
         return;
        }
      }
    }
  }
  if ($sidora_debug == 'screen') {
    print $debug_string;
  }
  if ($sidora_debug == 'watchdog') {
    if (function_exists('watchdog')) {
      watchdog('SidoraTuque',$debug_string);
    }else{
      print "Watchdog does not exist\n$debug_string";
    }
  }
}

/*
 * Return the display configuration object
 * If it's not already stored for this call, go get it from the exhibition_config server
 * Will return NULL on errors and may set drupal error messages during the error processing
 */
function si_exhibition_get_item_display_config($pid,$nav_to_pid,$print_drupal_messages = TRUE){
  if (empty($pid)) {
    return NULL;
  }
  si_exhibition_debug("Looking for item_display_config for pid:$pid",NULL,TRUE);
  
  $path = filter_input(INPUT_GET, 'path');
  $pid_on_url = arg(2); 
  //Start cache check for return
  $cache_name = 'item_display_config';
  $cache_index = $pid.'_'.$nav_to_pid;
  $to_return = si_exhibition_cache($cache_name,$cache_index);
  if (!empty($to_return)){
    si_exhibition_debug("Found item_display_config in cache.");
    return $to_return; 
  }
  si_exhibition_cron_cache(__FUNCTION__, func_get_args());
  //End cache


  //This is called a bunch of times, cache the info for the request at least
  if (!empty($_REQUEST['store_pid_config_'.$pid])){
    $to_return = $_REQUEST['store_pid_config_'.$pid];
    si_exhibition_debug("Found item_display_config in request info");
    return si_exhibition_cache($cache_name, $cache_index, $to_return);
  }
  $to_print = '';
  $url_to_get =
    variable_get('si_exhibition_data_url',
    ''
    )
    .
    urlencode($pid);
  $ch = curl_init();
  $timeout = 60;
  if (strpos($url_to_get, '?') === FALSE) {
    curl_setopt($ch, CURLOPT_URL, $url_to_get);//.'?time='.time());
  }
  else {
    curl_setopt($ch, CURLOPT_URL, $url_to_get);//.'&time='.time());
  }
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); //BBB TODO REMOVE
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); //BBB TODO REMOVE
  $data = curl_exec($ch);
  
  $curl_error_string = ''; 
  if ($data === FALSE){
    $curl_error_string = curl_error($ch);
    print 'Could not obtain data from:'.$url_to_get.'<br/>'."\n";
    print $curl_error_string.'<br/>'."\n";
    $info = curl_getinfo($ch);
    print_r ($info);
    curl_close($ch);
    $se = array();
    $se['error'] = $curl_error_string;
    $_REQUEST['store_pid_config_'.$pid] = $se;
    $to_return = $se;
    return si_exhibition_cache($cache_name, $cache_index, $to_return);
  }
    ob_start();
    print "Successful call to Exhibition_config\n";
    var_dump($ch);
    var_dump($curl_error_string);
    var_dump(curl_getinfo($ch));
    $debug_result = ob_get_clean();
    si_exhibition_debug($debug_result, curl_getinfo($ch));


  curl_close($ch);
  $my_json = $data;
  $se = json_decode($my_json,true);
  if (!empty($se['error'])){
    //No longer give download message, instead fully hide the data.  drupal_not_found() produces infinite loop
    watchdog('exhibition','Exhibition Config indicated this is not a good item to get:'.$url_to_get);

    // watchdog('exhibition',"Coming from:".exhibition_debug_string_backtrace());
    drupal_exit();
  }
  if (isset($se['nav_type']) && $se['nav_type'] == 'tree'){
    //See if the tree should start on the current node or if there is a path
    //if we have a path, make sure we can access that path
    $tree = NULL;
    $tree_pid_list = array();
    if (empty($path)){
      //$tree = _si_exhibition_get_pid_tree($pid_on_url, null, $tree_pid_list);
      $path_to_pid = array($pid_on_url);
      $tree = '';
			if (variable_get('si_exhibition_file_cache', FALSE)) $tree = _si_exhibition_get_pid_tree_from_cache($pid_on_url);
			if (empty($tree)) {
			  $tree = _si_exhibition_get_pid_tree_optimum($pid_on_url, null, $tree_pid_list, $path_to_pid);
				if (variable_get('si_exhibition_file_cache', FALSE)) {
				  $return_from_write = _si_exhibition_get_pid_tree_to_cache($pid_on_url,$tree);
          watchdog("exhibition",'si_exhibition_get_item_display_config, writing to file cache :'.$return_from_write);
				}	
			}
			else {
			  _si_exhibition_get_pid_list_from_tree(array($tree),$tree_pid_list);
			}	
      //$tree = _si_exhibition_get_pid_tree_optimum($pid_on_url, null, $tree_pid_list, $path_to_pid);
    }else{
      $path_list = explode(',',$path);
      if (!empty($path_list[0])){
        $path_to_pid = array($path_list[0]);
	      //$tree = _si_exhibition_get_pid_tree($path_list[0], null, $tree_pid_list, $path_to_pid);
        //$tree = _si_exhibition_get_pid_tree_optimum($path_list[0], null, $tree_pid_list,$path_to_pid);
      $tree = '';
			if (variable_get('si_exhibition_file_cache', FALSE)) $tree = _si_exhibition_get_pid_tree_from_cache($path_list[0]);
			if (empty($tree)) {
			  $tree = _si_exhibition_get_pid_tree_optimum($path_list[0], null, $tree_pid_list,$path_to_pid);
				if (variable_get('si_exhibition_file_cache', FALSE)) {
				  $return_from_write = _si_exhibition_get_pid_tree_to_cache($path_list[0],$tree);
          watchdog("exhibition",'si_exhibition_get_item_display_config, writing to file cache :'.$return_from_write);
				}	
			}
			else {
			  _si_exhibition_get_pid_list_from_tree(array($tree),$tree_pid_list);
			}	
      $bad_path = false;
			if (!in_array($pid_on_url,$tree_pid_list)){
        $bad_path = true;
			}
      try{
      // See if this is a resource of the final item in the path
      $pid_array_values = array_values(array_slice($path_list, -1));
      if (is_array($pid_array_values)){
        $possible_parent_pid = $pid_array_values[0];
        $children = si_exhibition_get_child_resource_info_by_id($possible_parent_pid);
        if (is_array($children)) {
          foreach($children as $child) {
            if ($child['pid'] == $pid_on_url) {
              $bad_path = false;
            }
          }
        }
      }
      else {
        $bad_path = true;
      }
    } catch(Exception $e) {
      watchdog('exhibition', '_si_show_exhibition page exception:'.$e->getMessage().'  '.$e->getTraceAsString());
      exit();
    }
		   if ($bad_path) {
					watchdog('exhibition','Bad tree structure');
          si_exhibition_debug('Bad tree structure, not going to show it');
          if ($GLOBALS['print_debug_lines']) print __LINE__ . ' of ' . __FILE__;
          //drupal_not_found() goes into infinite loop here
          //drupal_exit() goes into infinite loop here
          exit();
        }
      }
    }
    $to_print .= '<div id="forjstree" style="overflow:auto;"><ul>'.si_exhibition_get_printable_tree($tree).'</ul></div>';//['pid'];
  } else {
     $repo = tuque_wrapper_get_repository_instance();
     si_exhibition_debug('repo from si_exhibition_get_item_display_config');
     $object = $repo->getObject($nav_to_pid);
     $to_print = '<h2 class="title block-title">SI Navigation</h2>';
     $to_print .= theme('si_exhibition_navigation', array('object'=>$object));
  }
  if ($se['nav_location'] == 'left') $se['seu_nav_first'] = $to_print;
  if ($se['nav_location'] == 'right') $se['seu_nav_last'] = $to_print;
  if ($se['nav_location'] == 'bleft') $se['seu_nav_first_bottom'] = $to_print;
  if ($se['nav_location'] == 'bright') $se['seu_nav_last_bottom'] = $to_print;
  $_REQUEST['store_pid_config_'.$pid] = $se;
  $to_return = $se;
  return si_exhibition_cache($cache_name, $cache_index, $to_return);
}
/*
 * Returns a SIdora tree in html format
 */
function si_exhibition_get_printable_tree($tree_pos, $current_path = ''){
  $label = $tree_pos['label'];
  if (empty($label)){
    print_r($tree_pos);
  }
  $output = '<li><a href="'.base_path().'fedora/repository/'.$tree_pos['pid'].'?path='.$current_path.'">'.$tree_pos['label'];
  if (isset($tree_pos['already_in_tree']) && $tree_pos['already_in_tree']){
    $output .= '*';
  }
  $output .='</a>';
  if (!empty($tree_pos['children'])){
    if ($current_path != '') $current_path .= ',';
    $output .= '<ul>';
    foreach ($tree_pos['children'] as $curr ){
      $output .= si_exhibition_get_printable_tree($curr, $current_path.$tree_pos['pid']);
    }
    $output .= '</ul>';
  }
  $output .= '</li>';
  return $output;
}
function exhibition_debug_string_backtrace() {
  ob_start();
  debug_print_backtrace();
  $trace = ob_get_contents();
  ob_end_clean();

  // Remove first item from backtrace as it's this function which
  // is redundant.
  $trace = preg_replace ('/^#0\s+' . __FUNCTION__ . "[^\n]*\n/", '', $trace, 1);

  return $trace;
}
/**
 * Return an associative array of the visibility for the input pid
 * $pid - the Fedora ID, if NULL pulls from the assumed root of tree
 * The array is similar to this example:
{
  'pid':'si-user:126',
  'label':'randerson6',
  'type':'concept',
  'show_meta':true,
  'children':[{
    'pid':'si:12345',
    'name':'Image 1',
    'type':'resource',
    'show_meta':false,
    'show_preview':true,
    'allow_download':false
  },{
    'pid':'si:12346',
    'name':'Incomplete folder, will hold more info later',
    'type':'concept',
    'show_meta':false,
    'children':[{
      'pid':'si:12347',
      'name':'CSV filled with data',
      'type':'resource',
      'show_meta':true,
      'show_preview':true,
      'allow_download':true
    }]
  }]
}

 */
function si_exhibition_get_visibility_tree($pid = NULL) {
  if ($pid === NULL) {
    $parent_pid_path = si_exhibition_get_pid_path_to_showing_concept();
    if (!empty($parent_pid_path)){
      $pid = $parent_pid_path[0];
    }
  }
  $url_to_get = variable_get('si_exhibition_visibility_info_url', '') . urlencode($pid);
  if (array_key_exists($url_to_get, $GLOBALS)) {
    return $GLOBALS[$url_to_get];
  }
  $ch = curl_init();
  $timeout = 60;
  if (strpos($url_to_get, '?') === FALSE) {
    curl_setopt($ch, CURLOPT_URL, $url_to_get);//.'?time='.time());
  }
  else {
    curl_setopt($ch, CURLOPT_URL, $url_to_get);//.'&time='.time());
  }
  //curl_setopt($ch, CURLOPT_URL, $url_to_get);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); //BBB TODO REMOVE
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); //BBB TODO REMOVE
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
  $data = curl_exec($ch);
  if ($data === FALSE){
    /*
    ob_start();
    print "Error on visibility tree call\n";
    var_dump($ch);
    var_dump($curl_errori($ch));
    var_dump(curl_getinfo($ch));
    $debug_result = ob_get_clean();
    si_exhibition_sidora_debug($debug_result, curl_getinfo($ch));
    */

    $curl_error_string = curl_error($ch);
   // print_t('Could not obtain data from:'.$url_to_get);
    print $curl_error_string.'<br/>'."\n";
    $info = curl_getinfo($ch);
    print_r($info);
    curl_close($ch);
    $GLOBALS[$url_to_get] = NULL;
    return $GLOBALS[$url_to_get];
  }
  ob_start();
  print "Success on visibility tree call\n";
  var_dump($ch);
  var_dump(curl_error($ch));
  var_dump(curl_getinfo($ch));
  var_dump($data);
  $debug_result = ob_get_clean();
  si_exhibition_debug($debug_result, curl_getinfo($ch));

  curl_close($ch);
 
  
  $GLOBALS[$url_to_get] = json_decode($data, TRUE);
  ob_start();
  print "Returning visibility object\n";
  var_dump ($GLOBALS[$url_to_get]);
  $debug_result = ob_get_clean();
  si_exhibition_debug($debug_result);

  return $GLOBALS[$url_to_get];
}
/*
 * The tree looks like this:
{
  ['pid'] = $pid
  ['label'] = Fedora object label
  ['children'] = array(
    {
      ['pid'] = 'si:child1',
      ['label'] = Fedora object label
      ['children'] = array()
    },{
      ['pid'] = 'si:child2',
      ['label'] = Fedora object label
      ['children'] = array()
    },{
      ['pid'] = 'si:child2',
      ['label'] = Fedora object label
      ['children'] = array(),
      ['already_in_tree'] = TRUE
    },{
    ...
    }
  )
 * return the php object representing the fedora tree
 */
function _si_exhibition_get_pid_tree($pid, $owner_id, &$pid_list = array(), $path_from_root_to_current_pid = array()){
  //Request level cache
  //$req_key = $pid.'_'.$owner_id.'_'.implode(':',$pid_list);
  //global $get_pid_tree_request;
  //if (empty($get_pid_tree_request)) $get_pid_tree_request = array();
  //if (array_key_exists($req_key,$get_pid_tree_request)) return $get_pid_tree_request[$req_key];

  $to_return = array();
  $to_return['pid'] = $pid;
  $repo = tuque_wrapper_get_repository_instance();
  si_exhibition_debug('repo from _si_exhibition_get_pid_tree');
  $visibility_settings_check = si_exhibition_check_visibility($pid, $path_from_root_to_current_pid);
  /*
  print "\nStart\n";
  var_dump($visibility_settings_check);
  var_dump($pid);
  var_dump($path_from_root_to_current_pid);
  print "\nEnd\n";
  */
  
  $debug_info = array();
  $debug_info['pid'] = $pid;
  $debug_info['pfrtcp'] = $path_from_root_to_current_pid;
  $debug_info['vsc'] = $visibility_settings_check;
  si_exhibition_debug('get_pid_tree',$debug_info);

  if ($visibility_settings_check === FALSE) return NULL;

  if (in_array($pid, $pid_list)){
    //already did this, duplicate found:
    //dsm('found this pid in the tree already:'.$pid);
    $object = $repo->getObject($pid);
    $to_return['label'] = $object->label;
    $to_return['already_in_tree'] = TRUE;

    //$get_pid_tree_request[$req_key] = $to_return; //request level cache

    return $to_return;
  }
  try{
    $exist = si_exhibition_check_object_info_accessible(array('pid' => $pid));
    if ($exist){
      $object = $repo->getObject($pid);
      $to_return['label'] = $object->label;
      $to_return['children'] = array();
      $pid_list[] = $pid;
      $children = si_exhibition_get_child_concept_info_by_id($pid);
      /*
      print "\nchildren:";
      var_dump($children);
      print "\nfor pid:";
      var_dump($pid);
      */
      $path_from_root_to_current_pid[] = $pid;
      //Get the children
      foreach($children as $child){
        //Build the tree from all the children
        //for each child, get their sub-tree
        $children = _si_exhibition_get_pid_tree($child['pid'],$owner_id,$pid_list, $path_from_root_to_current_pid);
        if (!empty($children)) {
          $to_return['children'][] = $children;
        }
      }
      //$get_pid_tree_request[$req_key] = $to_return; //request level cache
      return $to_return;
    }else{
      $to_return = null;
      //$get_pid_tree_request[$req_key] = $to_return; //request level cache
      return $to_return;
    }
  }catch(Exception $hce){
    $to_return = null;
    //$get_pid_tree_request[$req_key] = $to_return; //request level cache
    return $to_return;
  }
}
function _si_exhibition_get_pid_tree_from_cache($pid) {
 if (is_file(drupal_realpath('public://' . 'pid_tree_' . $pid . '.html'))) {
   return json_decode(file_get_contents(drupal_realpath('public://' . 'pid_tree_' . $pid . '.html')), true); 
 }
 return;
} 
function _si_exhibition_get_pid_tree_to_cache($pid,$tree) {
	return file_put_contents('public://' . 'pid_tree_' . $pid . '.html',json_encode($tree)); 
 }
function _si_exhibition_get_pid_tree_optimum($pid, $owner_id, &$pid_list = array(), $path_from_root_to_current_pid = array()){
  //Request level cache
  //$req_key = $pid.'_'.$owner_id.'_'.implode(':',$pid_list);
  //global $get_pid_tree_request;
  //if (empty($get_pid_tree_request)) $get_pid_tree_request = array();
  //if (array_key_exists($req_key,$get_pid_tree_request)) return $get_pid_tree_request[$req_key];
  $to_return = array();
  $to_return['pid'] = $pid;
  $repo = tuque_wrapper_get_repository_instance();
  si_exhibition_debug('repo from _si_exhibition_get_pid_tree');
  $visibility_settings_check = si_exhibition_check_visibility_optimum(array_pop($path_from_root_to_current_pid), $path_from_root_to_current_pid);
  $debug_info = array();
  $debug_info['pid'] = $pid;
  $debug_info['pfrtcp'] = $path_from_root_to_current_pid;
  $debug_info['vsc'] = $visibility_settings_check;
  si_exhibition_debug('get_pid_tree',$debug_info);
  if ($visibility_settings_check === FALSE) return NULL;
  if (in_array($pid, $pid_list)){
    //already did this, duplicate found:
    //dsm('found this pid in the tree already:'.$pid);
    $object = $repo->getObject($pid);
    $to_return['label'] = $object->label;
    $to_return['already_in_tree'] = TRUE;
    //$get_pid_tree_request[$req_key] = $to_return; //request level cache
    return $to_return;
  }
  try{
    $exist = si_exhibition_check_object_info_accessible(array('pid' => $pid));
    if ($exist){
      $object = $repo->getObject($pid);
      $to_return['label'] = $object->label;
      $to_return['children'] = array();
      array_push($pid_list,$pid);
      $children = si_exhibition_get_child_concept_info_by_id($pid);
      array_push($path_from_root_to_current_pid,$pid);
      //Get the children
      foreach($children as $child){
        //Build the tree from all the children
        //for each child, get their sub-tree
	$path_to_current_child = $path_from_root_to_current_pid;
	array_push($path_to_current_child,$child['pid']);
	$children = _si_exhibition_get_pid_tree_optimum($child['pid'],$owner_id,$pid_list, $path_to_current_child);
        if (!empty($children)) {
          $to_return['children'][] = $children;
        }
      }
      //$get_pid_tree_request[$req_key] = $to_return; //request level cache
      return $to_return;
    }else{
      $to_return = null;
      //$get_pid_tree_request[$req_key] = $to_return; //request level cache
      return $to_return;
    }
  }catch(Exception $hce){
    $to_return = null;
    //$get_pid_tree_request[$req_key] = $to_return; //request level cache
    return $to_return;
  }
}
/*
 * hook_cron() to be run with the cron jobs, check fedora to see if there's new information to cache
 */
function si_exhibition_cron(){
  require_once ( dirname(__FILE__) . '/si_exhibition.util.inc');
  $cron_check = si_exhibition_cron_cache(); 
  cache_clear_all('si_exhibition_cache_', 'cache', TRUE);  //Clear the main cache
  if (empty($cron_check)){
    return;
  }
  // To enhance speed do not refresh the caches
  return TRUE;
  /*
  foreach($cron_check as $fn_name => $fn_args_arrays){
    drupal_set_message("si_exhibition reestablishing caches for:".$fn_name);
    foreach($fn_args_arrays as $fn_args){
      //if it's _si_exhibition_get_pid_tree only make the calls where the array is blank, as the others are unnecessary and we worry about pass by ref
      if ($fn_name == '_si_exhibition_get_pid_tree'){
        $pid_list = array();
        _si_exhibition_get_pid_tree($fn_args[0],$fn_args[1],$pid_list);
      }else{
        call_user_func_array($fn_name, $fn_args);
      }
    }
  }
  */
}
/*
 * Return the form that will change the table presented in the middle of the exhibition screen in the browser
 */
function exhibition_resources_form($form, &$form_state){
  $form['#method'] = 'get';
  foreach($_GET as $param_name => $param_value){
    if ($param_name != 'q' && $param_name != 'form_id' && $param_name != 'form_build_id' && $param_name != 'op' && $param_name != 'form_token'){
      $form[$param_name] = array(
        '#type' => 'hidden',
        '#default_value' => $param_value,
      );
    }
  }
  $form['show'] = array(
    '#type' => 'select',
    '#title' => t('Limit by type'),
    '#default_value' => (isset($_GET['show'])?$_GET['show']:''),//$form_state['show'],
    '#options' => array(
      'all' => t('All'),
      'images' => t('Images'),
      'pdf' => t('Digitized Text (pdf)'),
      'csv' => t('Tabular Datasets'),
      'audio' => t('Audio'),
      'video' => t('Video'),
    ),
  );
  $form['limit'] = array(
    '#type' => 'select',
    '#title' => t('Results per page'),
    '#default_value' => (isset($_GET['limit'])?$_GET['limit']:''),
    '#options' => array(
      '10' => t('10'),
      '15' => t('15'),
      '20' => t('20'),
      '25' => t('25'),
      '30' => t('30'),
    ),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
  );
  return $form;
}

function _si_exhibition_dump(&$var) {
  if (SIDORA_EX_DUMP === TRUE) {
    var_dump($var);
  }
}
function si_exhibition_get_obj_datastream_content($pid) {
  require_once ( dirname(__FILE__) . '/si_exhibition.util.inc');
  $parent_pid_path = si_exhibition_get_pid_path_to_showing_concept();
	array_push($parent_pid_path,$pid);
  $vis_obj = si_exhibition_get_visibility_object_optimum($pid, $parent_pid_path);
  if (empty($vis_obj) || empty($vis_obj['allow_download'])) {
    si_exhibition_sidora_debug('No vis object or vis object allow_download');
    watchdog('exhibition','Obj datastream content not allowed:'.$pid);
    if ($GLOBALS['print_debug_lines']) print __LINE__ . ' of ' . __FILE__;
    drupal_exit();
  }
  $repo = tuque_wrapper_get_repository_instance();
  $object = $repo->getObject($pid);
  foreach($object as $dsid_loop=>$datastream_loop) {
    if ($dsid_loop == 'OBJ'){
      $datastream = $datastream_loop;
      $datastream_content = $datastream->content;
    }	
   }	
  if (empty($datastream_content)){
    print t('Datastream not found by that name');
    watchdog('exhibition','Obj datastream content not exist:'.$pid);
    drupal_exit();
  }
  //datastream_content is now set.  perform the output
  $mime_type = (empty($datastream))?'text/xml':$datastream->mimeType;
  header('Content-length: ' . strlen($datastream_content));
  // Prevent adding on a duplicate extension.
  $label = $datastream->label;
  if (strtoupper($label) != 'OBJ'){
    $filename = $datastream->label;
  }else{
    $url_to_get = variable_get('si_exhibition_workbench_xsl', '') . 'file_extension/' . urlencode($pid);
    $ch = curl_init();
    $timeout = 60;
    if (strpos($url_to_get, '?') === FALSE) {
      curl_setopt($ch, CURLOPT_URL, $url_to_get);//.'?time='.time());
    }
    else {
      curl_setopt($ch, CURLOPT_URL, $url_to_get);//.'&time='.time());
    }
    //curl_setopt($ch, CURLOPT_URL, $url_to_get);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); //BBB TODO REMOVE
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); //BBB TODO REMOVE
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
      $data = curl_exec($ch);
      if ($data === FALSE){
        /*
        ob_start();
        print "Error on file extension call\n";
        var_dump($ch);
        var_dump($curl_errori($ch));
        var_dump(curl_getinfo($ch));
        $debug_result = ob_get_clean();
        si_exhibition_sidora_debug($debug_result, curl_getinfo($ch));
        */

        $curl_error_string = curl_error($ch);
       // print_t('Could not obtain data from:'.$url_to_get);
        print $curl_error_string.'<br/>'."\n";
        $info = curl_getinfo($ch);
        print_r($info);
        curl_close($ch);
        return;
      }
      /*
      ob_start();
      print "Success on file extension call\n";
      var_dump($ch);
      var_dump(curl_error($ch));
      var_dump(curl_getinfo($ch));
      $debug_result = ob_get_clean();
      si_exhibition_sidora_debug($debug_result, curl_getinfo($ch));
      */
      curl_close($ch);
      $extension = json_decode($data);
      $filename = $pid.'_OBJ'.$extension;//get_suggest_filename($label, $mime_type);*/
    }	
    header("Content-type: $mime_type");
    header("Content-Disposition: attachment; filename=\"$filename\"");
    print $datastream_content;
    drupal_exit();
}		
function si_exhibition_deliver_streaming($pid, $dsid = 'OBJ') {
  $repo = tuque_wrapper_get_repository_instance();
  $object = $repo->getObject($pid);
  $datastream = $object[$dsid];
  header('Content-type: ' . $datastream->mimetype);
  try{
    if ($datastream->controlGroup == 'M' || $datastream->controlGroup == 'X') {
      header('Content-length: ' . $datastream->size);
    }
  }catch(Exception $exc){

    $url = variable_get('fedora_base_url', 'http://localhost:8080/fedora') . "/objects/".urlencode($pid)."/datastreams/$dsid/history?format=xml";
      $ch = curl_init();
      curl_setopt($ch, CURLOPT_URL, $url);
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
      curl_setopt($ch, CURLOPT_USERPWD, ":");
      curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
      $output = curl_exec($ch);
      $info = curl_getinfo($ch);
      curl_close($ch);
      $tagname = 'dsSize';
      $pattern = "@<$tagname(?:\s.*?!/)?>(.*?)</$tagname\s*>@s";  //<?
      $dsSize = "";
      preg_match($pattern, $output, $matches);
      $dsSize = $matches[1];
      header('Content-length: ' . $dsSize);
  }
  $chunk_headers = si_exhibition_islandora_view_datastream_set_chunk_headers($datastream);
  si_exhibition_islandora_view_datastream_deliver_chunks($datastream, $chunk_headers);
  exit();
}
/**
 * Set the headers for the chunking of our content.
 *
 * @param AbstractDatastream $datastream
 *   An AbstractDatastream representing a datastream on a Fedora object.
 *
 * @return bool
 *   TRUE if there are chunks to be returned, FALSE otherwise.
 */
function si_exhibition_islandora_view_datastream_set_chunk_headers(AbstractDatastream $datastream) {
  $file_uri = si_exhibition_islandora_view_datastream_retrieve_file_uri($datastream);
  // The meat of this has been taken from:
  // http://mobiforge.com/design-development/content-delivery-mobile-devices.
  $size   = filesize($file_uri);
  $length = $size;
  $start  = 0;
  $end    = $size - 1;

  header("Accept-Ranges: 0-$length");
  if (isset($_SERVER['HTTP_RANGE'])) {
    $c_start = $start;
    $c_end   = $end;
    // Extract the range string.
    list(, $range) = explode('=', $_SERVER['HTTP_RANGE'], 2);
    // Make sure the client hasn't sent us a multibyte range.
    if (strpos($range, ',') !== FALSE) {
      // Not a valid range, notify the client.
      header('HTTP/1.1 416 Requested Range Not Satisfiable');
      header("Content-Range: bytes $start-$end/$size");
      exit;
    }
    // If the range starts with an '-' we start from the beginning. If not, we
    // forward the file pointer and make sure to get the end byte if specified.
    if (strpos($range, '-') === 0) {
      // The n-number of the last bytes is requested.
      $c_start = $size - substr($range, 1);
    }
    else {
      $range  = explode('-', $range);
      $c_start = $range[0];
      $c_end   = (isset($range[1]) && is_numeric($range[1])) ? $range[1] : $size;
    }
    /* Check the range and make sure it's treated according to the specs.
     * http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
     */
    // End bytes can not be larger than $end.
    $c_end = ($c_end > $end) ? $end : $c_end;
    // Validate the requested range and return an error if it's not correct.
    if ($c_start > $c_end || $c_start > $size - 1 || $c_end >= $size) {
      header('HTTP/1.1 416 Requested Range Not Satisfiable');
      header("Content-Range: bytes $start-$end/$size");
      exit;
    }
    $start  = $c_start;
    $end    = $c_end;
    // Calculate new content length.
    $length = $end - $start + 1;
    header('HTTP/1.1 206 Partial Content');
  }
  // Notify the client the byte range we'll be outputting.
  header("Content-Range: bytes $start-$end/$size");
  header("Content-Length: $length");
  return array(
    'start' => $start,
    'end' => $end,
  );
}
/**
 * Deliver back the specified chunks of a file.
 *
 * @param AbstractDatastream $datastream
 *   An AbstractDatastream representing a datastream on a Fedora object.
 * @param array $params
 *   An associate array containing the start and ending chunk bytes.
 */
function si_exhibition_islandora_view_datastream_deliver_chunks(AbstractDatastream $datastream, $params) {
  $file_uri = si_exhibition_islandora_view_datastream_retrieve_file_uri($datastream);
  // The meat of this has been taken from:
  // http://mobiforge.com/design-development/content-delivery-mobile-devices.
  $fp = @fopen($file_uri, 'rb');
  fseek($fp, $params['start']);
  // Start buffered download.
  $buffer = 1024 * 8;
  while (!feof($fp) && ($p = ftell($fp)) <= $params['end']) {
    if ($p + $buffer > $params['end']) {
      // In case we're only outputting a chunk, make sure we don't read past the
      // length.
      $buffer = $params['end'] - $p + 1;
    }
    // Reset time limit for big files.
    set_time_limit(0);
    echo fread($fp, $buffer);
  }
  fclose($fp);
}

/**
 * Creates/returns the file URI for the content of a datastream for chunking.
 *
 * @param AbstractDatastream $datastream
 *   An AbstractDatastream representing a datastream on a Fedora object.
 * @param $extension
 *   Extension for the file
 *
 * @return string
 *   The URI of the file.
 */
function si_exhibition_islandora_view_datastream_retrieve_file_uri(AbstractDatastream $datastream, $extension = '') {
  $file_uri = 'temporary://chunk_' . $datastream->parent->id . '_' . $datastream->id . '.' . $extension;
  //$file_uri = 'temporary://chunk_' . $datastream->parent->id . '_' . $datastream->id . '_' . $datastream->createdDate->getTimestamp() . '.' . $extension;
  if (!file_exists($file_uri)) {
    $file = new stdClass();
    $file->uri = $file_uri;
    $file->filename = drupal_basename($file_uri);
    $file->filemime = $datastream->mimeType;
    $file->status = 0;
    $datastream->getContent($file_uri);
    file_save($file);
  }
  return $file_uri;
}
function si_exhibition_get_parent_xsl($pid_to_check) {
  $pptsc = si_exhibition_get_pid_path_to_showing_concept();
  $pid_for_config = array_shift($pptsc);
  $se = si_exhibition_get_item_display_config($pid_for_config, arg(2));
  if ((isset($se['xslt'])) && (!empty($se['xslt'])) && ($se['xslt'] != '')) {
    return $pid_for_config;
  }
  return arg(2);
} 	 
function si_exhibition_get_degradation_level($pid_to_check) {
  $pptsc = si_exhibition_get_pid_path_to_showing_concept();
  $pid_for_config = array_shift($pptsc);
  $se = si_exhibition_get_item_display_config($pid_for_config, arg(2));
  if (isset($se['image_degradation'])) {
    return $se['image_degradation'];
  }
  return '2';
} 
function si_exhibition_get_visibility_tree_children($pid = NULL,$path_to_pid = NULL) {
  if ($pid === NULL) {
    $parent_pid_path = si_exhibition_get_pid_path_to_showing_concept();
    if (!empty($parent_pid_path)){
      $pid = array_pop($parent_pid_path);
    }
  }
  if ($path_to_pid == NULL) {
    $parent_pid_path = si_exhibition_get_pid_path_to_showing_concept();
    if (!empty($parent_pid_path)){
      $path_to_pid = implode('_',$parent_pid_path);
     }
   }	
   if ($path_to_pid == '') $path_to_pid = $pid; 	
  $url_to_get = variable_get('si_exhibition_visibility_info_url', '');
  $url_to_get = si_exhibition_get_optimized_url($url_to_get,'json_visibility_children') . urlencode($path_to_pid);
  watchdog("exhibition",'si_exhibition_get_visibility_tree_children: url to get'.$url_to_get);
  if (array_key_exists($url_to_get, $GLOBALS)) {
    return $GLOBALS[$url_to_get];
  }
  $ch = curl_init();
  $timeout = 60;
  if (strpos($url_to_get, '?') === FALSE) {
    curl_setopt($ch, CURLOPT_URL, $url_to_get);//.'?time='.time());
  }
  else {
    curl_setopt($ch, CURLOPT_URL, $url_to_get);//.'&time='.time());
  }
  //curl_setopt($ch, CURLOPT_URL, $url_to_get);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); //BBB TODO REMOVE
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); //BBB TODO REMOVE
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
  $data = curl_exec($ch);
  if ($data === FALSE){
    /*
    ob_start();
    print "Error on visibility tree call\n";
    var_dump($ch);
    var_dump($curl_errori($ch));
    var_dump(curl_getinfo($ch));
    $debug_result = ob_get_clean();
    si_exhibition_sidora_debug($debug_result, curl_getinfo($ch));
    */

    $curl_error_string = curl_error($ch);
   // print_t('Could not obtain data from:'.$url_to_get);
    print $curl_error_string.'<br/>'."\n";
    $info = curl_getinfo($ch);
    print_r($info);
    curl_close($ch);
    $GLOBALS[$url_to_get] = NULL;
    return $GLOBALS[$url_to_get];
  }
  ob_start();
  print "Success on visibility tree call\n";
  var_dump($ch);
  var_dump(curl_error($ch));
  var_dump(curl_getinfo($ch));
  var_dump($data);
  $debug_result = ob_get_clean();
  si_exhibition_debug($debug_result, curl_getinfo($ch));
  curl_close($ch);
  $GLOBALS[$url_to_get] = json_decode($data, TRUE);
  ob_start();
  print "Returning visibility tree children\n";
  var_dump ($GLOBALS[$url_to_get]);
  $debug_result = ob_get_clean();
  si_exhibition_debug($debug_result);
  return $GLOBALS[$url_to_get];
}

function si_exhibition_get_visibility_tree_optimum($pid = NULL,$path_to_pid = NULL) {
  if ($pid === NULL) {
    $parent_pid_path = si_exhibition_get_pid_path_to_showing_concept();
    if (!empty($parent_pid_path)){
      $pid = $parent_pid_path[0];
    }
  }
  if ($path_to_pid == NULL) {
    $parent_pid_path = si_exhibition_get_pid_path_to_showing_concept();
    if (!empty($parent_pid_path)){
      $path_to_pid = implode('_',$parent_pid_path);
    }
  }	
  if (($path_to_pid == '') || ($path_to_pid == NULL)) {
    $path_to_pid = $pid; 	
  }	
  $url_to_get = variable_get('si_exhibition_visibility_info_url', '');
  $url_to_get = si_exhibition_get_optimized_url($url_to_get,'json_visibility_new') . urlencode($path_to_pid);
  watchdog("exhibition",'si_exhibition_get_visibility_tree_optimum, url_to_get :'.$url_to_get);
  if (array_key_exists($url_to_get, $GLOBALS)) {
    return $GLOBALS[$url_to_get];
  }
  $ch = curl_init();
  $timeout = 60;
  if (strpos($url_to_get, '?') === FALSE) {
    curl_setopt($ch, CURLOPT_URL, $url_to_get);//.'?time='.time());
  }
  else {
    curl_setopt($ch, CURLOPT_URL, $url_to_get);//.'&time='.time());
  }
  //curl_setopt($ch, CURLOPT_URL, $url_to_get);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); //BBB TODO REMOVE
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); //BBB TODO REMOVE
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
  $data = curl_exec($ch);
  if ($data === FALSE){
    /*
    ob_start();
    print "Error on visibility tree call\n";
    var_dump($ch);
    var_dump($curl_errori($ch));
    var_dump(curl_getinfo($ch));
    $debug_result = ob_get_clean();
    si_exhibition_sidora_debug($debug_result, curl_getinfo($ch));
    */

    $curl_error_string = curl_error($ch);
   // print_t('Could not obtain data from:'.$url_to_get);
    print $curl_error_string.'<br/>'."\n";
    $info = curl_getinfo($ch);
    print_r($info);
    curl_close($ch);
    $GLOBALS[$url_to_get] = NULL;
    return $GLOBALS[$url_to_get];
  }
  ob_start();
  print "Success on visibility tree call\n";
  var_dump($ch);
  var_dump(curl_error($ch));
  var_dump(curl_getinfo($ch));
  var_dump($data);
  $debug_result = ob_get_clean();
  si_exhibition_debug($debug_result, curl_getinfo($ch));
  curl_close($ch);
  $GLOBALS[$url_to_get] = json_decode($data, TRUE);
  ob_start();
  print "Returning visibility object\n";
  var_dump ($GLOBALS[$url_to_get]);
  $debug_result = ob_get_clean();
  si_exhibition_debug($debug_result);
  return $GLOBALS[$url_to_get];
}
function si_exhibition_get_optimized_url($url_to_process = NULL, $optimized_call = NULL) {
  if (($url_to_process !== NULL) && ($optimized_call !== NULL)) {
    $exploded_url = explode('/',$url_to_process);
    $visibility_in_url = sizeof($exploded_url) - 2;
    $exploded_url[$visibility_in_url] = $optimized_call;
    $url_to_process = implode('/',$exploded_url);
    return $url_to_process;
  }	
}
function _si_exhibition_get_pid_list_from_tree($branch,&$tree_pid_list) {
  if (isset($branch) && sizeof($branch) && !empty($branch)) {
    foreach ($branch as $child_array) {
		  array_push($tree_pid_list,$child_array['pid']);
      if ((isset($child_array['children'])) && (sizeof($child_array['children']) > 0)) {
				_si_exhibition_get_pid_list_from_tree($child_array['children'],$tree_pid_list);
      }
    }
	}
} 

